[{"C:\\React\\Projects\\github-projects\\todolist\\src\\index.tsx":"1","C:\\React\\Projects\\github-projects\\todolist\\src\\features\\TodolistsList\\TodolistsList.tsx":"2","C:\\React\\Projects\\github-projects\\todolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"3","C:\\React\\Projects\\github-projects\\todolist\\src\\features\\TodolistsList\\tasks-reducer.ts":"4","C:\\React\\Projects\\github-projects\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx":"5","C:\\React\\Projects\\github-projects\\todolist\\src\\features\\login\\Login.tsx":"6","C:\\React\\Projects\\github-projects\\todolist\\src\\app\\App.tsx":"7","C:\\React\\Projects\\github-projects\\todolist\\src\\api\\todolists-api.ts":"8","C:\\React\\Projects\\github-projects\\todolist\\src\\utils\\error-utils.ts":"9","C:\\React\\Projects\\github-projects\\todolist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"10","C:\\React\\Projects\\github-projects\\todolist\\src\\components\\AddItemForm\\AddItemForm.tsx":"11","C:\\React\\Projects\\github-projects\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"12","C:\\React\\Projects\\github-projects\\todolist\\src\\features\\TodolistsList\\todolists-reducer.ts":"13"},{"size":752,"mtime":1623945269242,"results":"14","hashOfConfig":"15"},{"size":4039,"mtime":1623964694666,"results":"16","hashOfConfig":"15"},{"size":1092,"mtime":1596716576000,"results":"17","hashOfConfig":"15"},{"size":5633,"mtime":1596722126000,"results":"18","hashOfConfig":"15"},{"size":952,"mtime":1594154724000,"results":"19","hashOfConfig":"15"},{"size":4085,"mtime":1623954081614,"results":"20","hashOfConfig":"15"},{"size":2740,"mtime":1638471734842,"results":"21","hashOfConfig":"15"},{"size":3095,"mtime":1624052781270,"results":"22","hashOfConfig":"15"},{"size":811,"mtime":1596719330000,"results":"23","hashOfConfig":"15"},{"size":4193,"mtime":1596715250000,"results":"24","hashOfConfig":"15"},{"size":1595,"mtime":1596715562000,"results":"25","hashOfConfig":"15"},{"size":1773,"mtime":1596295538000,"results":"26","hashOfConfig":"15"},{"size":4585,"mtime":1597327450000,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"37uxcn",{"filePath":"31","messages":"32","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\React\\Projects\\github-projects\\todolist\\src\\index.tsx",[],["60","61"],"C:\\React\\Projects\\github-projects\\todolist\\src\\features\\TodolistsList\\TodolistsList.tsx",["62","63","64","65","66","67","68","69"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=>state.auth.isLoggedIn)\r\n\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","C:\\React\\Projects\\github-projects\\todolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"C:\\React\\Projects\\github-projects\\todolist\\src\\features\\TodolistsList\\tasks-reducer.ts",["70","71"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","C:\\React\\Projects\\github-projects\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"C:\\React\\Projects\\github-projects\\todolist\\src\\features\\login\\Login.tsx",["72"],"C:\\React\\Projects\\github-projects\\todolist\\src\\app\\App.tsx",["73"],"C:\\React\\Projects\\github-projects\\todolist\\src\\api\\todolists-api.ts",[],"C:\\React\\Projects\\github-projects\\todolist\\src\\utils\\error-utils.ts",[],"C:\\React\\Projects\\github-projects\\todolist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["74","75","76","77","78","79"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n",["80","81"],"C:\\React\\Projects\\github-projects\\todolist\\src\\components\\AddItemForm\\AddItemForm.tsx",["82","83","84"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\React\\Projects\\github-projects\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["85","86","87"],"C:\\React\\Projects\\github-projects\\todolist\\src\\features\\TodolistsList\\todolists-reducer.ts",["88"],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":40,"column":8,"nodeType":"95","endLine":40,"endColumn":10,"suggestions":"96"},{"ruleId":"93","severity":1,"message":"97","line":45,"column":8,"nodeType":"95","endLine":45,"endColumn":10,"suggestions":"98"},{"ruleId":"93","severity":1,"message":"97","line":50,"column":8,"nodeType":"95","endLine":50,"endColumn":10,"suggestions":"99"},{"ruleId":"93","severity":1,"message":"97","line":55,"column":8,"nodeType":"95","endLine":55,"endColumn":10,"suggestions":"100"},{"ruleId":"93","severity":1,"message":"97","line":60,"column":8,"nodeType":"95","endLine":60,"endColumn":10,"suggestions":"101"},{"ruleId":"93","severity":1,"message":"97","line":65,"column":8,"nodeType":"95","endLine":65,"endColumn":10,"suggestions":"102"},{"ruleId":"93","severity":1,"message":"97","line":70,"column":8,"nodeType":"95","endLine":70,"endColumn":10,"suggestions":"103"},{"ruleId":"93","severity":1,"message":"97","line":75,"column":8,"nodeType":"95","endLine":75,"endColumn":10,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":5,"column":9,"nodeType":"107","messageId":"108","endLine":5,"endColumn":22},{"ruleId":"109","severity":1,"message":"110","line":13,"column":94,"nodeType":"111","messageId":"112","endLine":13,"endColumn":96},{"ruleId":"113","severity":1,"message":"114","line":60,"column":32,"nodeType":"115","endLine":60,"endColumn":49},{"ruleId":"93","severity":1,"message":"116","line":35,"column":8,"nodeType":"95","endLine":35,"endColumn":10,"suggestions":"117"},{"ruleId":"93","severity":1,"message":"118","line":35,"column":8,"nodeType":"95","endLine":35,"endColumn":10,"suggestions":"119"},{"ruleId":"93","severity":1,"message":"120","line":39,"column":8,"nodeType":"95","endLine":39,"endColumn":42,"suggestions":"121"},{"ruleId":"93","severity":1,"message":"120","line":46,"column":8,"nodeType":"95","endLine":46,"endColumn":54,"suggestions":"122"},{"ruleId":"93","severity":1,"message":"120","line":48,"column":95,"nodeType":"95","endLine":48,"endColumn":134,"suggestions":"123"},{"ruleId":"93","severity":1,"message":"120","line":49,"column":101,"nodeType":"95","endLine":49,"endColumn":140,"suggestions":"124"},{"ruleId":"93","severity":1,"message":"120","line":50,"column":107,"nodeType":"95","endLine":50,"endColumn":146,"suggestions":"125"},{"ruleId":"89","replacedBy":"126"},{"ruleId":"91","replacedBy":"127"},{"ruleId":"105","severity":1,"message":"128","line":2,"column":9,"nodeType":"107","messageId":"108","endLine":2,"endColumn":12},{"ruleId":"105","severity":1,"message":"129","line":2,"column":14,"nodeType":"107","messageId":"108","endLine":2,"endColumn":20},{"ruleId":"105","severity":1,"message":"130","line":2,"column":22,"nodeType":"107","messageId":"108","endLine":2,"endColumn":33},{"ruleId":"93","severity":1,"message":"120","line":15,"column":97,"nodeType":"95","endLine":15,"endColumn":130,"suggestions":"131"},{"ruleId":"93","severity":1,"message":"120","line":20,"column":8,"nodeType":"95","endLine":20,"endColumn":41,"suggestions":"132"},{"ruleId":"93","severity":1,"message":"120","line":24,"column":8,"nodeType":"95","endLine":24,"endColumn":41,"suggestions":"133"},{"ruleId":"109","severity":1,"message":"110","line":10,"column":45,"nodeType":"111","messageId":"112","endLine":10,"endColumn":47},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.","ArrayExpression",["136"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["137"],["138"],["139"],["140"],["141"],["142"],["143"],"@typescript-eslint/no-unused-vars","'setAppErrorAC' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["144"],"React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["145"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["146"],["147"],["148"],["149"],["150"],["134"],["135"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.",["151"],["152"],["153"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"156","fix":"158"},{"desc":"156","fix":"159"},{"desc":"156","fix":"160"},{"desc":"156","fix":"161"},{"desc":"156","fix":"162"},{"desc":"156","fix":"163"},{"desc":"156","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"167","fix":"169"},{"desc":"167","fix":"170"},{"desc":"167","fix":"171"},{"desc":"167","fix":"172"},{"desc":"167","fix":"173"},{"desc":"167","fix":"174"},{"desc":"167","fix":"175"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"176","text":"177"},"Update the dependencies array to be: [dispatch]",{"range":"178","text":"179"},{"range":"180","text":"179"},{"range":"181","text":"179"},{"range":"182","text":"179"},{"range":"183","text":"179"},{"range":"184","text":"179"},{"range":"185","text":"179"},{"range":"186","text":"179"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"187","text":"188"},"Update the dependencies array to be: [props]",{"range":"189","text":"190"},{"range":"191","text":"190"},{"range":"192","text":"190"},{"range":"193","text":"190"},{"range":"194","text":"190"},{"range":"195","text":"190"},{"range":"196","text":"190"},{"range":"197","text":"190"},[1332,1334],"[demo, dispatch, isLoggedIn]",[1503,1505],"[dispatch]",[1674,1676],[1879,1881],[2092,2094],[2293,2295],[2440,2442],[2619,2621],[1256,1258],[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],"[props]",[1846,1892],[1991,2030],[2133,2172],[2281,2320],[765,798],[1071,1104],[1261,1294]]